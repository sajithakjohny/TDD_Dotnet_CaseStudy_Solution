Intital Setup 
------------------
-All items have a SellIn value which denotes the number of days we have to sell the item
-All items have a Quality value which denotes how valuable the item is

 public string Name { get; set; }
 public int SellIn { get; set; }
 public int Quality { get; set; }
-----------------------------------------------------
Sample List of Items
----------------
item name,Sellvlaue, qualityvlaue

"+5 Dexterity Vest", 10, 20
"Aged Brie", 2, 0
"Elixir of the Mongoose", 5, 7
"Sulfuras, Hand of Ragnaros", 0, 80
"Backstage passes to a TAFKAL80ETC concert", 15, 20
"Conjured Mana Cake", 3, 6
-----------------------------------------------------
Normal Item consider here as =>
+5 Dexterity Vest,Elixir of the Mongoose


# => At the end of each day our system lowers both values for every item
 Once the sell by date has passed, Quality degrades twice as fast
If(Item is Normal)
{

 Quality =Quality - 1;
SellIn = SellIn -1
if (item.SellIn < 0 &&  item.Quality > 0)
Quality =Quality - 1;
}

 => The Quality of an item is never negative
if(Quality value < 0)
Quality = 0;

# => "Aged Brie" actually increases in Quality the older it gets
IF(Item is "Aged Brie")
Quality =Quality +1;
SellIn = SellIn -1

=> The Quality of an item is never more than 50
if(Quality value > 50)
Quality = 50;

# => "Sulfuras", being a legendary item, never has to be sold or decreases in Quality
If(item is "Sulfuras")
{
Quality = Quality ;
SellIn  =SellIn ;
}

#  => "Backstage passes", like aged brie, increases in Quality as it's SellIn value approaches; 
Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but Quality drops to 0 after the concert
if(item is "Backstage passes")
{
if (SellIn < 0)
            {
                Quality = 0;
            }
            else if (SellIn <= 5)
            {
                Quality = Quality + 3;
            }
            else if (SellIn <= 10)
            {
                Quality = Quality + 2;
            }
            else
            {
                Quality = Quality + 1;
            }
SellIn = SellIn -1
}


#  => "Conjured" items degrade in Quality twice as fast as normal items

At the end of each day our system lowers both values for every item
 Once the sell by date has passed, Quality degrades twice as fast

if(item is "Conjured" )
{

 Quality =Quality - 2;
SellIn = SellIn -1
if (item.SellIn < 0 &&  item.Quality > 0)
Quality =Quality - 2;

}

------------------------------------------------------------------------------------------
Code Refactor Points
-------------------------
1)Instead for loop we changed to foreach
2)Instead of item taking using items[i].name we changed to  item.name, item.SellIn}
3)Logic we convert based on item name , we set quality and SellIn 
4)we have removed unwanted namespace and sorted namespace
5)We have set Deafult range for Quality  and we addd this as common 
less than 0 should set 0 , Greater than 50 should set 50
6)We have added new feature Conjured 
7)Nested If condition replaced with swtich case for Each Item condition check
8)logic we placed into different method for each item 
9)we have test case for each item name based with different conditions
10)Theory Implemented for each test case by using testDataclass  and reduced test method count
11)Contant Implemented for string repetion 
12)Inline If statement added to reduce number of lines



